---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Muulfz.
--- DateTime: 8/12/2020 6:04 PM
---

stx_performance_options_api = {}

local stx_performance_options = {
    menu = {},
    title = "Performance Configuration",
    menuWidth = 0.3,
    closeMenu = {
        title = 'Exit',
        id = 'closeMenu'
    },
    menu_ids = {}, -- key menuId , value tabName
    menu_number = 0,
    main_menuId = "stxperoption"
}

local Proxy = module("vrp", "lib/Proxy")
Proxy.addInterface("stx_performance_options", stx_performance_options_api)

-- API
function stx_performance_options_api.registerBooleanOption(menuId, featureName, default, callbackFunction)
    local persistenceTab = stx_performance_options.menu[menuId]
    if persistenceTab == nil then
        persistenceTab = generate_performance_option_menu(menuId)
    end

    if callbackFunction ~= nil then
        persistenceTab.booleanOptions[featureName] = {
            default = default,
            cb = callbackFunction
        }
    end
end

function stx_performance_options_api.removeBooleanOption(menuId, optionName)
    local persistenceTab = stx_performance_options.menu[menuId]
    if persistenceTab ~= nil then
        table.remove(persistenceTab[menuId].booleanOptions[optionName])
        stx_performance_options.menu_number = stx_performance_options.menu_number + 1
    end
end

function stx_performance_options_api.registerNumberOption(menuId, featureName, current, maxValue, callbackFunction)
    local persistenceTab = stx_performance_options.menu[menuId]
    if persistenceTab == nil then
        persistenceTab = generate_performance_option_menu(menuId)
    end

    if callbackFunction ~= nil then
        persistenceTab.numeralOptions[featureName] = {
            current = current,
            selected = current,
            maxValue = maxValue,
            cb = callbackFunction
        }
    end
end

function stx_performance_options_api.removeNumberOption(menuId, optionName)
    local persistenceTab = stx_performance_options.menu[menuId]
    if persistenceTab ~= nil then
        table.remove(persistenceTab[menuId].NumberOptions[optionName])
        stx_performance_options.menu_number = stx_performance_options.menu_number + 1
    end
end

-- Internal
function generate_performance_option_menu(menuId)
    stx_performance_options.menu[menuId] = {
        title = menuId,
        booleanOptions = {},
        numeralOptions = {}
    }
    stx_performance_options.menu_number = stx_performance_options.menu_number + 1
    return stx_performance_options.menu[menuId]
end

function menu_builder(menuId)
    for tabName, tabValue in pairs(stx_performance_options.menu) do
        WarMenu.CreateSubMenu(tabName, menuId, tabValue.title)
        WarMenu.SetMenuWidth(tabName, stx_performance_options.menuWidth)

        WarMenu.MenuButton(tabValue.title, tabName)
        table.insert(stx_performance_options.menu_ids, tabName)
    end

    WarMenu.MenuButton(stx_performance_options.closeMenu.title, stx_performance_options.closeMenu.id)
end

function check_sub_menu()
    for i, menuId in ipairs(stx_performance_options.menu_ids) do
        if WarMenu.IsMenuOpened(menuId) then
            return show_submenu_options(stx_performance_options.menu[menuId])
        end
    end

end

function show_submenu_options(menu)
    setup_menu_bool_options(menu.booleanOptions)
    setup_menu_number_options(menu.numeralOptions)

    WarMenu.Display()
end

function setup_menu_bool_options(booleanMenuTable)
    for menuId, value in pairs(booleanMenuTable) do
        WarMenu.CheckBox(menuId, value.default, function(final)
            value.default = not value.default
            value.cb(final)
        end)
    end
end

function setup_menu_number_options(numberMenuTable)

    for menuId, value in pairs(numberMenuTable) do
        local items = {}
        for i = 1, value.maxValue do
            table.insert(items, i)
        end
        WarMenu.ComboBox(menuId, items, value.current, value.selected, function(currentIndex, selectedIndex)
            value.current = currentIndex
            value.selected = selectedIndex

            value.cb(currentIndex, selectedIndex)
        end)
    end
end

Citizen.CreateThread(function()
    local menuId = stx_performance_options.main_menuId

    WarMenu.CreateMenu(menuId, stx_performance_options.title)
    WarMenu.SetMenuWidth(menuId, stx_performance_options.menuWidth)

    while true do
        if stx_performance_options.menu_number > 0 then
            if WarMenu.IsMenuOpened(menuId) then
                menu_builder(menuId)

                Citizen.Trace(WarMenu.CurrentOption())

                WarMenu.Display()
            elseif WarMenu.IsMenuOpened(stx_performance_options.closeMenu.id) then
                WarMenu.closeMenu()

            elseif IsControlJustReleased(0, 244) then
                WarMenu.OpenMenu(menuId)
            else
                check_sub_menu()
            end
        end

        Citizen.Wait(0)
    end
end)

--TODO Save users settings